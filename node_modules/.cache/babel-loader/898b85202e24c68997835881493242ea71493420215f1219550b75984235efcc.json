{"ast":null,"code":"var _jsxFileName = \"/Users/chrtran/Downloads/Frontend_Branch/frontend/src/components/SelectedPost.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport Comment from \"./Comment\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst PAGE_SIZE = 2;\nconst fetchCommentsForPost = async (postId, pageNumber = 1) => {\n  const params = new URLSearchParams({\n    \"per-page\": PAGE_SIZE.toString(),\n    page: pageNumber.toString()\n  });\n  const response = await fetch(`/api/posts/${postId}/comments?${params}`);\n  if (!response.ok) {\n    throw new Error(\"Failed to fetch comments\");\n  }\n  return response.json();\n};\nconst SelectedPost = ({\n  post,\n  setSelectedPost\n}) => {\n  _s();\n  const [comments, setComments] = useState([]);\n  const hasNextPage = comments.length > 0 && comments.length < post.commentCount;\n  const fetchMoreComments = () => {\n    if (hasNextPage) {\n      const pagesFetched = comments.length / PAGE_SIZE;\n      const nextPage = pagesFetched + 1;\n      fetchCommentsForPost(post.id, nextPage).then(comments => {\n        setComments(prevComments => [...prevComments, ...comments]);\n      });\n    }\n  };\n\n  // Fetch the first page of comments on mount\n  useEffect(() => {\n    fetchCommentsForPost(post.id).then(comments => {\n      setComments(comments);\n    });\n  }, [post.id]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        padding: \"20px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          cursor: \"pointer\"\n        },\n        onClick: () => setSelectedPost(null),\n        children: \"Back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        style: {\n          fontSize: \"1.5em\",\n          fontWeight: \"700\",\n          marginBottom: \"10px\"\n        },\n        children: post.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          marginBottom: \"10px\"\n        },\n        children: post.content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Author:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this), \" \", post.author]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Posted on:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this), \" \", new Date(post.createdAt).toLocaleDateString()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"flex\",\n          flexDirection: \"column\",\n          marginTop: \"20px\"\n        },\n        children: comments.map((comment, index) => /*#__PURE__*/_jsxDEV(Comment, {\n          comment: comment,\n          firstComment: index === 0\n        }, comment.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), hasNextPage && /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          cursor: \"pointer\"\n        },\n        onClick: fetchMoreComments,\n        children: \"Fetch more comments\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s(SelectedPost, \"ByfV/t0DOiJY0nGyfgV+6QjIggQ=\");\n_c = SelectedPost;\nexport default SelectedPost;\nvar _c;\n$RefreshReg$(_c, \"SelectedPost\");","map":{"version":3,"names":["React","useEffect","useState","Comment","jsxDEV","_jsxDEV","Fragment","_Fragment","PAGE_SIZE","fetchCommentsForPost","postId","pageNumber","params","URLSearchParams","toString","page","response","fetch","ok","Error","json","SelectedPost","post","setSelectedPost","_s","comments","setComments","hasNextPage","length","commentCount","fetchMoreComments","pagesFetched","nextPage","id","then","prevComments","children","style","padding","cursor","onClick","fileName","_jsxFileName","lineNumber","columnNumber","fontSize","fontWeight","marginBottom","title","content","author","Date","createdAt","toLocaleDateString","display","flexDirection","marginTop","map","comment","index","firstComment","_c","$RefreshReg$"],"sources":["/Users/chrtran/Downloads/Frontend_Branch/frontend/src/components/SelectedPost.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Comment from \"./Comment\";\nimport { CommentType, PostType } from \"../types\";\n\nconst PAGE_SIZE = 2;\n\nconst fetchCommentsForPost = async (\n  postId: number,\n  pageNumber: number = 1\n): Promise<CommentType[]> => {\n  const params = new URLSearchParams({\n    \"per-page\": PAGE_SIZE.toString(),\n    page: pageNumber.toString(),\n  });\n\n  const response = await fetch(`/api/posts/${postId}/comments?${params}`);\n\n  if (!response.ok) {\n    throw new Error(\"Failed to fetch comments\");\n  }\n\n  return response.json();\n};\n\nconst SelectedPost = ({\n  post,\n  setSelectedPost,\n}: {\n  post: PostType;\n  setSelectedPost: (post: PostType | null) => void;\n}) => {\n  const [comments, setComments] = useState<CommentType[]>([]);\n\n  const hasNextPage =\n    comments.length > 0 && comments.length < post.commentCount;\n\n  const fetchMoreComments = () => {\n    if (hasNextPage) {\n      const pagesFetched = comments.length / PAGE_SIZE;\n      const nextPage = pagesFetched + 1;\n      fetchCommentsForPost(post.id, nextPage).then((comments) => {\n        setComments((prevComments) => [...prevComments, ...comments]);\n      });\n    }\n  };\n\n  // Fetch the first page of comments on mount\n  useEffect(() => {\n    fetchCommentsForPost(post.id).then((comments) => {\n      setComments(comments);\n    });\n  }, [post.id]);\n\n  return (\n    <>\n      <div style={{ padding: \"20px\" }}>\n        <button\n          style={{ cursor: \"pointer\" }}\n          onClick={() => setSelectedPost(null)}\n        >\n          Back\n        </button>\n        <h2\n          style={{\n            fontSize: \"1.5em\",\n            fontWeight: \"700\",\n            marginBottom: \"10px\",\n          }}\n        >\n          {post.title}\n        </h2>\n        <p style={{ marginBottom: \"10px\" }}>{post.content}</p>\n        <p>\n          <strong>Author:</strong> {post.author}\n        </p>\n        <p>\n          <strong>Posted on:</strong>{\" \"}\n          {new Date(post.createdAt).toLocaleDateString()}\n        </p>\n        <div\n          style={{\n            display: \"flex\",\n            flexDirection: \"column\",\n            marginTop: \"20px\",\n          }}\n        >\n          {comments.map((comment, index) => (\n            <Comment\n              key={comment.id}\n              comment={comment}\n              firstComment={index === 0}\n            />\n          ))}\n        </div>\n        {hasNextPage && (\n          <button style={{ cursor: \"pointer\" }} onClick={fetchMoreComments}>\n            Fetch more comments\n          </button>\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default SelectedPost;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}