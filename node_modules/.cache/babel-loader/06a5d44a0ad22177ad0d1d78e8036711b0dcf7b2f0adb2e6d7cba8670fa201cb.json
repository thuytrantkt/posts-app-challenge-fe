{"ast":null,"code":"var _jsxFileName = \"/Users/chrtran/Downloads/Frontend_Branch/frontend/src/components/PostsPage.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Post from \"./Post\";\nimport SelectedPost from \"./SelectedPost\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst fetchPosts = async () => {\n  const response = await fetch(\"/api/posts\");\n  if (!response.ok) {\n    throw new Error(\"Failed to fetch posts\");\n  }\n  return response.json();\n};\nconst PostsPage = () => {\n  _s();\n  const [posts, setPosts] = useState([]);\n  const [selectedPost, setSelectedPost] = useState(null);\n  useEffect(() => {\n    const loadPosts = async () => {\n      try {\n        const fetchedPosts = await fetchPosts();\n        setPosts(fetchedPosts);\n      } catch (error) {\n        console.error(\"Failed to load posts:\", error);\n      }\n    };\n    loadPosts();\n  }, []);\n  if (selectedPost) {\n    return /*#__PURE__*/_jsxDEV(SelectedPost, {\n      post: selectedPost,\n      setSelectedPost: setSelectedPost\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: 10\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Posts\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        flexDirection: \"column\",\n        marginBottom: \"20px\",\n        backgroundColor: \"#fff\",\n        gap: \"20px\"\n      },\n      children: posts.map(post => /*#__PURE__*/_jsxDEV(Post, {\n        post: post,\n        setSelectedPost: setSelectedPost\n      }, post.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n_s(PostsPage, \"nZP3Fsrc8kzc4EI8y80UU9Kha0Q=\");\n_c = PostsPage;\nexport default PostsPage;\nvar _c;\n$RefreshReg$(_c, \"PostsPage\");","map":{"version":3,"names":["React","useState","useEffect","Post","SelectedPost","jsxDEV","_jsxDEV","fetchPosts","response","fetch","ok","Error","json","PostsPage","_s","posts","setPosts","selectedPost","setSelectedPost","loadPosts","fetchedPosts","error","console","post","fileName","_jsxFileName","lineNumber","columnNumber","style","padding","children","display","flexDirection","marginBottom","backgroundColor","gap","map","id","_c","$RefreshReg$"],"sources":["/Users/chrtran/Downloads/Frontend_Branch/frontend/src/components/PostsPage.tsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { PostType } from \"../types\";\nimport Post from \"./Post\";\nimport SelectedPost from \"./SelectedPost\";\n\nconst fetchPosts = async (): Promise<PostType[]> => {\n  const response = await fetch(\"/api/posts\");\n\n  if (!response.ok) {\n    throw new Error(\"Failed to fetch posts\");\n  }\n\n  return response.json();\n};\n\nconst PostsPage = () => {\n  const [posts, setPosts] = useState<PostType[]>([]);\n  const [selectedPost, setSelectedPost] = useState<PostType | null>(null);\n\n  useEffect(() => {\n    const loadPosts = async () => {\n      try {\n        const fetchedPosts = await fetchPosts();\n        setPosts(fetchedPosts);\n      } catch (error) {\n        console.error(\"Failed to load posts:\", error);\n      }\n    };\n\n    loadPosts();\n  }, []);\n\n  if (selectedPost) {\n    return (\n      <SelectedPost post={selectedPost} setSelectedPost={setSelectedPost} />\n    );\n  }\n\n  return (\n    <div style={{ padding: 10 }}>\n      <h1>Posts</h1>\n      <div\n        style={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          marginBottom: \"20px\",\n          backgroundColor: \"#fff\",\n          gap: \"20px\",\n        }}\n      >\n        {posts.map((post) => (\n          <Post key={post.id} post={post} setSelectedPost={setSelectedPost} />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default PostsPage;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAElD,OAAOC,IAAI,MAAM,QAAQ;AACzB,OAAOC,YAAY,MAAM,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1C,MAAMC,UAAU,GAAG,MAAAA,CAAA,KAAiC;EAClD,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,YAAY,CAAC;EAE1C,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;EAC1C;EAEA,OAAOH,QAAQ,CAACI,IAAI,CAAC,CAAC;AACxB,CAAC;AAED,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGf,QAAQ,CAAa,EAAE,CAAC;EAClD,MAAM,CAACgB,YAAY,EAAEC,eAAe,CAAC,GAAGjB,QAAQ,CAAkB,IAAI,CAAC;EAEvEC,SAAS,CAAC,MAAM;IACd,MAAMiB,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF,MAAMC,YAAY,GAAG,MAAMb,UAAU,CAAC,CAAC;QACvCS,QAAQ,CAACI,YAAY,CAAC;MACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC/C;IACF,CAAC;IAEDF,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;EAEN,IAAIF,YAAY,EAAE;IAChB,oBACEX,OAAA,CAACF,YAAY;MAACmB,IAAI,EAAEN,YAAa;MAACC,eAAe,EAAEA;IAAgB;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAE1E;EAEA,oBACErB,OAAA;IAAKsB,KAAK,EAAE;MAAEC,OAAO,EAAE;IAAG,CAAE;IAAAC,QAAA,gBAC1BxB,OAAA;MAAAwB,QAAA,EAAI;IAAK;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACdrB,OAAA;MACEsB,KAAK,EAAE;QACLG,OAAO,EAAE,MAAM;QACfC,aAAa,EAAE,QAAQ;QACvBC,YAAY,EAAE,MAAM;QACpBC,eAAe,EAAE,MAAM;QACvBC,GAAG,EAAE;MACP,CAAE;MAAAL,QAAA,EAEDf,KAAK,CAACqB,GAAG,CAAEb,IAAI,iBACdjB,OAAA,CAACH,IAAI;QAAeoB,IAAI,EAAEA,IAAK;QAACL,eAAe,EAAEA;MAAgB,GAAtDK,IAAI,CAACc,EAAE;QAAAb,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAiD,CACpE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACb,EAAA,CAzCID,SAAS;AAAAyB,EAAA,GAATzB,SAAS;AA2Cf,eAAeA,SAAS;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}